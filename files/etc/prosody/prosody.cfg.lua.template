-- Prosody Configuration File
--
-- Information on configuring Prosody can be found on our
-- website at http://prosody.im/doc/configure
--
-- Tip: You can check that the syntax of this file is correct
-- when you have finished by running: prosodyctl check config
-- If there are any errors, it will let you know what and where
-- they are, otherwise it will keep quiet.


---------- Server-wide settings ----------
-- Settings in this section apply to the whole server and are the default settings
-- for any virtual hosts

-- This is a (by default, empty) list of accounts that are admins
-- for the server. Note that you must create the accounts separately
-- (see http://prosody.im/doc/creating_accounts for info)
-- Example: admins = { "user1@example.com", "user2@example.net" }
admins = { "$ADMIN_JID" }

-- This is the list of modules Prosody will load on startup.
-- It looks for mod_modulename.lua in the plugins folder, so make sure that exists too.
-- Documentation on modules can be found at: http://prosody.im/doc/modules

plugin_paths = { "/usr/lib64/prosody/modules", "/usr/lib64/prosody/community-modules" };

modules_enabled = {

	-- Generally required
		"disco"; -- Service discovery
		"roster"; -- Allow users to have a roster. Recommended ;)
		"saslauth"; -- Authentication for clients and servers. Recommended if you want to log in.
		"tls"; -- Add support for secure TLS on c2s/s2s connections

	-- Not essential, but recommended
		"blocklist"; -- Allow users to block communications with other users
		"bookmarks"; -- Synchronise the list of open rooms between clients
		"carbons"; -- Keep multiple online clients in sync
		"dialback"; -- Support for verifying remote servers using DNS
		"limits"; -- Enable bandwidth limiting for XMPP connections
		"pep"; -- Allow users to store public and private data in their account
		"private"; -- Legacy account storage mechanism (XEP-0049)
		"smacks"; -- Stream management and resumption (XEP-0198)
		"vcard4"; -- User profiles (stored in PEP)
		"vcard_legacy"; -- Conversion between legacy vCard and PEP Avatar, vcard

	-- Nice to have
		"csi_simple"; -- Simple but effective traffic optimizations for mobile devices
		--"invites"; -- Create and manage invites
		--"invites_adhoc"; -- Allow admins/users to create invitations via their client
		--"invites_register"; -- Allows invited users to create accounts
		"ping"; -- Replies to XMPP pings with pongs
		"register"; -- Allow users to register on this server using a client and change passwords
		"time"; -- Let others know the time here on this server
		"uptime"; -- Report how long server has been running
		"version"; -- Replies to server version requests
		"mam"; -- Store recent messages to allow multi-device synchronization
		--"turn_external"; -- Provide external STUN/TURN service for e.g. audio/video calls

	-- Admin interfaces
		"admin_adhoc"; -- Allows administration via an XMPP client that supports ad-hoc commands
		"admin_shell"; -- Allow secure administration via 'prosodyctl shell'

	-- HTTP modules
		"bosh"; -- Enable BOSH clients, aka "Jabber over HTTP"
		"http_openmetrics"; -- for exposing metrics to stats collectors
		"websocket"; -- XMPP over WebSockets

	-- Other specific functionality
		"announce"; -- Send announcement to all online users
		--"groups"; -- Shared roster support
		--"legacyauth"; -- Legacy authentication. Only used by some old clients and bots.
		"mimicking"; -- Prevent address spoofing
		--"motd"; -- Send a message to users when they log in
		"proxy65"; -- Enables a file transfer proxy service which clients behind NAT can use
		"s2s_bidi"; -- Bi-directional server-to-server (XEP-0288)
		"server_contact_info"; -- Publish contact information for this service
		"tombstones"; -- Prevent registration of deleted accounts
		"watchregistrations"; -- Alert admins of registrations
		"welcome"; -- Welcome users who register accounts

	-- Customly added by $DOMAIN_NAME
		"http_upload";
		"turncredentials";

		-- XEP-0352: Client State Indication
		"csi";
		"throttle_presence";
		"filter_chatstates";

		-- Push notifications
		"cloud_notify";

		-- XMPP Compliance Tester pleasing. 2021-10-29

		"firewall";
		"limit_auth";
		"block_strangers";
}

-- These modules are auto-loaded, but should you want
-- to disable them then uncomment them here:
modules_disabled = {
	-- "offline"; -- Store offline messages
	-- "c2s"; -- Handle client connections
	-- "s2s"; -- Handle server-to-server connections
	-- "posix"; -- POSIX functionality, sends server to background, enables syslog, etc.
}

-- Disable account creation by default, for security
-- For more information see http://prosody.im/doc/creating_accounts
allow_registration = false

-- These are the SSL/TLS-related settings. If you don't want
-- to use SSL/TLS, you may comment or remove this
ssl = {
	key = "/etc/prosody/certs/$DOMAIN_NAME.key";
	certificate = "/etc/prosody/certs/$DOMAIN_NAME.crt";
}
c2s_direct_tls_ports = { 5223 }

-- Force clients to use encrypted connections? This option will
-- prevent clients from authenticating unless they are using encryption.

c2s_require_encryption = true

-- Force certificate authentication for server-to-server connections?
-- This provides ideal security, but requires servers you communicate
-- with to support encryption AND present valid, trusted certificates.
-- NOTE: Your version of LuaSec must support certificate verification!
-- For more information see http://prosody.im/doc/s2s#security

s2s_secure_auth = true

-- Many servers don't support encryption or have invalid or self-signed
-- certificates. You can list domains here that will not be required to
-- authenticate using certificates. They will be authenticated using DNS.

--s2s_insecure_domains = { "gmail.com" }

-- Even if you leave s2s_secure_auth disabled, you can still require valid
-- certificates for some domains by specifying a list here.

--s2s_secure_domains = { "jabber.org" }

-- Select the authentication backend to use. The 'internal' providers
-- use Prosody's configured data storage to store the authentication data.
-- To allow Prosody to offer secure authentication mechanisms to clients, the
-- default provider stores passwords in plaintext. If you do not trust your
-- server please see http://prosody.im/doc/modules/mod_auth_internal_hashed
-- for information about using the hashed backend.
-- See http://prosody.im/doc/authentication for other possibilities including
-- Cyrus SASL.

authentication = "internal_hashed"

-- Select the storage backend to use. By default Prosody uses flat files
-- in its configured data directory, but it also supports more backends
-- through modules. An "sql" backend is included by default, but requires
-- additional dependencies. See http://prosody.im/doc/storage for more info.

storage = "sql" -- Default is "internal"

-- For the "sql" backend, you can uncomment *one* of the below to configure:
--sql = { driver = "SQLite3", database = "prosody.sqlite" } -- Default. 'database' is the filename.
--sql = { driver = "MySQL", database = "prosody", username = "prosody", password = "secret", host = "localhost" }
sql = { driver = "PostgreSQL", database = "$XMPP_DB_NAME", username = "$XMPP_DB_USER", password = "$XMPP_DB_PASS", host = "localhost" }

-- Logging configuration
-- For advanced logging see http://prosody.im/doc/logging
log = {
	info = "/var/log/prosody/prosody.log"; -- Change 'info' to 'debug' for verbose logging
	error = { "/var/log/prosody/prosody.err", "*syslog" };
	-- "*syslog"; -- Uncomment this for logging to syslog; needs mod_posix
	-- "*console"; -- Log to the console, useful for debugging with daemonize=false
}

-- Pidfile, used by prosodyctl and the init.d script
pidfile = "/var/run/prosody/prosody.pid"

-- User and group, used for daemon
prosody_user = "prosody"
prosody_group = "prosody"


----- Additional global settings by $DOMAIN_NAME -----

-- Personal MAM settings
default_archive_policy = true
archive_expires_after = "never"

-- Chatroom MAM settings
muc_log_by_default = true
max_archive_query_results = 20
max_history_messages = 1000

-- mod_turncredential
turncredentials_host = "$EXTERNAL_IP"
turncredentials_secret = "$TURN_SECRET"

contact_info = {
	abuse = { "mailto:$ADMIN_EMAIL", "xmpp:$ADMIN_JID" };
	admin = { "mailto:$ADMIN_EMAIL", "xmpp:$ADMIN_JID" };
	feedback = { "mailto:$ADMIN_EMAIL", "xmpp:$ADMIN_JID" };
	sales = { "mailto:$ADMIN_EMAIL", "xmpp:$ADMIN_JID" };
	security = { "mailto:$ADMIN_EMAIL", "xmpp:$ADMIN_JID" };
	support = { "mailto:$ADMIN_EMAIL", "xmpp:$ADMIN_JID", "xmpp:support@chat.$DOMAIN_NAME" };
}

disco_items = {
	{ "proxy.decent.im", "SOCKS5 proxy service" };
	{ "chat.decent.im", "Chatrooms" };
}

firewall_scripts = {
	"module:scripts/spam-blocking.pfw";
	"module:scripts/spam-blocklists.pfw";
	"module:scripts/spam-strip-xhtml.pfw";
	"/etc/decent.im/custom-firewall-rules.pfw";
}

limit_auth_period = 3600 -- over ... seconds
limit_auth_max = 1 -- tolerate no more than ... failed attempts
limit_auth_tarpit_delay = 100 -- delay answer this long

----------- Virtual hosts -----------
-- You need to add a VirtualHost entry for each domain you wish Prosody to serve.
-- Settings under each VirtualHost entry apply *only* to that host.

VirtualHost "$DOMAIN_NAME"
	enabled = true

------ Components ------
-- You can specify components to add hosts that provide special services,
-- like multi-user conferences, and transports.
-- For more information on components, see http://prosody.im/doc/components

---Set up a MUC (multi-user chat) room server
Component "chat.$DOMAIN_NAME" "muc"
	restrict_room_creation = "local"
	modules_enabled = {
		"muc_mam";
		-- XEP-0153: vCard-Based Avatar (MUC)
		"vcard_muc";
	}

-- Set up a SOCKS5 bytestream proxy for server-proxied file transfers:
Component "proxy.$DOMAIN_NAME" "proxy65"

---Set up an external component (default component port is 5347)
--
-- External components allow adding various services, such as gateways/
-- transports to other networks like ICQ, MSN and Yahoo. For more info
-- see: http://prosody.im/doc/components#adding_an_external_component
--
--Component "gateway.example.com"
--	component_secret = "password"

Component "pubsub.$DOMAIN_NAME" "pubsub"

-- Generic IRC transport
-- IRC server is specified in JID of requested resource
Component "irc.$DOMAIN_NAME"
	component_secret = "$TRANSPORT_SECRET"
